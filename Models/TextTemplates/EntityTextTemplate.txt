{{- for item in usings }}using {{ item }};
{{- end }}

namespace {{ namespace }};

/// <summary>
/// 
/// </summary>
public class {{ class_name }} : BaseEntity
{

    #region Fields


    #endregion

    #region Ctors

    private {{ class_name }}() {}

    private {{ class_name }}({{ for par in constructor }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }})
    {
        SetId(Guid.NewGuid().ToString());

        {{ for prop in injected_properties }}
        {{ prop.destination }} = {{ prop.source }};{{ end }}

        //CheckPolicies({{ class_name }}ValidatorService);

        //AddDomainEvent(new {{ entity_name_created_event }}({{ for par in entity_name_created_event_constructor }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }}));
    }

    #endregion

    #region Properties

    {{ for prop in properties }} 
    {{ prop.modificator }} {{ prop.type }} {{ prop.name }} { {{ for state in prop.accessors }} {{ state }}; {{- end }} }
    {{- end }}

    #endregion

    #region Methods

    /// <summary>
    /// 
    /// </summary>
    public static {{ class_name }} Create({{ for par in create_parameters }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }})
    {
        return new {{ class_name }}({{ for par in create_parameters }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }});
    }

    ///// <summary>
    /////  
    ///// </summary>
    public void Update{{ class_name }}({{ for par in update_parameters }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }})
    {
        {{ for prop in update_properties }}
        {{ prop.destination }} = {{ prop.source }};{{ end }}

        //CheckPolicies();

        //AddDomainEvent(new {{ class_name }}UpdatedEvent({{ for par in update_parameters }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }}));
    }

    #endregion

}